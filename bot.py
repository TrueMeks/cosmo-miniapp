# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞: python -m pip install python-telegram-bot==20.6
import json
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

TOKEN = "8431586699:AAF093GO1N8LU46V_pc1iJLIie1neYvlAWc"
ADMIN_CHAT_ID = 828210450  # –≤—Ä–µ–º–µ–Ω–Ω–æ None, —É–∑–Ω–∞–µ–º –Ω–∏–∂–µ –∏ –ø–æ–¥—Å—Ç–∞–≤–∏–º —á–∏—Å–ª–æ

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–æ–¥–µ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —Ç–≤–æ–π chat_id, —Å–∫–æ–ø–∏—Ä—É–π –µ–≥–æ –≤ ADMIN_CHAT_ID
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ–π chat_id: {cid}")
    print("–í–∞—à ADMIN_CHAT_ID:", cid)

async def handle_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if update.message and update.message.web_app_data:
        raw = update.message.web_app_data.data
        try:
            payload = json.loads(raw)  # –æ–∂–∏–¥–∞–µ–º {"type":"booking","data":{...}}
            booking = payload.get("data", payload)
        except Exception:
            booking = {"raw": raw}

        text = (
            "üßæ <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å</b>\n"
            f"üë§ –ò–º—è: {booking.get('name','')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {booking.get('phone','')}\n"
            f"üíÜ –£—Å–ª—É–≥–∞: {booking.get('service','')}\n"
            f"üìÖ –î–∞—Ç–∞: {booking.get('date','')}  ‚è∞ {booking.get('time','')}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {booking.get('note','')}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É (—Ç–µ–±–µ)
        if ADMIN_CHAT_ID:
            try:
                await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=text, parse_mode="HTML")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É:", e)

        # –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ")
    else:
        # –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.message and update.message.text:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start –∏–ª–∏ –æ—Ç–∫—Ä–æ–π ¬´–ó–∞–ø–∏—Å—å¬ª –≤ –º–µ–Ω—é –±–æ—Ç–∞ üôÇ")

# –î–æ–ø. –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if ADMIN_CHAT_ID:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚úÖ")
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏ chat_id —á–µ—Ä–µ–∑ /start –∏ –ø–æ–¥—Å—Ç–∞–≤—å –≤ –∫–æ–¥.")

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("test", test))
app.add_handler(MessageHandler(filters.ALL, handle_all))
app.run_polling()
